//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.13 at 04:35:28 PM IST 
//


package com.fullerton.olp.wsdao.crmnext.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for VisibilityOption.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="VisibilityOption"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="None"/&gt;
 *     &lt;enumeration value="OnlyMyRecords"/&gt;
 *     &lt;enumeration value="AllRecords"/&gt;
 *     &lt;enumeration value="ExcludeMyRecords"/&gt;
 *     &lt;enumeration value="TeamRecords"/&gt;
 *     &lt;enumeration value="SubordinateRecords"/&gt;
 *     &lt;enumeration value="MyManager"/&gt;
 *     &lt;enumeration value="ImmediateSubordinate"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "VisibilityOption")
@XmlEnum
public enum VisibilityOption {

    @XmlEnumValue("None")
    NONE("None"),
    @XmlEnumValue("OnlyMyRecords")
    ONLY_MY_RECORDS("OnlyMyRecords"),
    @XmlEnumValue("AllRecords")
    ALL_RECORDS("AllRecords"),
    @XmlEnumValue("ExcludeMyRecords")
    EXCLUDE_MY_RECORDS("ExcludeMyRecords"),
    @XmlEnumValue("TeamRecords")
    TEAM_RECORDS("TeamRecords"),
    @XmlEnumValue("SubordinateRecords")
    SUBORDINATE_RECORDS("SubordinateRecords"),
    @XmlEnumValue("MyManager")
    MY_MANAGER("MyManager"),
    @XmlEnumValue("ImmediateSubordinate")
    IMMEDIATE_SUBORDINATE("ImmediateSubordinate");
    private final String value;

    VisibilityOption(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static VisibilityOption fromValue(String v) {
        for (VisibilityOption c: VisibilityOption.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
